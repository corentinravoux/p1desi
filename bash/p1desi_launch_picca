#!/bin/bash -l

path_in="${1}"
surveys="${2}"
path_out=${3}
region=${4}
suffix=${5}
snr_cut=${6}
lines=${7}
lines_name=${8}
cat=${9}
catalog_name=${10}
noise_estimate=${11}
mode=${12}
use_constant_weight=${13}
dla=${14}
dla_name=${15}
bal=${16}
nb_proc=${17}
run_delta=${18}
run_pk=${19}
use_bookkeeping=${20}
weights=${21}
velunits=${22}
rebinfac=${23}
meansnrcut=${24}
compute_cov=${25}
nbboot=${26}
cross_exposure=${27}

echo "input path for computation:"
echo $path_in
echo "surveys used for computation:"
echo $surveys
echo "output path for computation:"
echo $path_out
echo "p1d region name:"
echo $region
echo "specific suffix:"
echo $suffix
echo "SNR cut:"
echo $snr_cut
echo "sky line file:"
echo $lines
echo "sky line name:"
echo $lines_name
echo "QSO catalog file:"
echo $cat
echo "QSO catalog name:"
echo $catalog_name
echo "noise estimate for p1d:"
echo $noise_estimate
echo "mode:"
echo $mode
echo "constant weight option:"
echo $use_constant_weight
echo "dla catalog:"
echo $dla
echo "dla catalog name:"
echo $dla_name
echo "bal parameter cut:"
echo $bal
echo "number of processors:"
echo $nb_proc
echo "running of deltas:"
echo $run_delta
echo "running of pk1d:"
echo $run_pk
echo "Use of bookkeeping:"
echo $use_bookkeeping
echo "Use of a specific weighting for average pk calculation:"
echo $weights
echo "Use velocity unit conversion for average pk calculation:"
echo $velunits
echo "Rebinning factor for average pk calculation:"
echo $rebinfac
echo "Special snr cut for pk calculation:"
echo $meansnrcut
echo "Compute covariance and bootstrap covariance:"
echo $compute_cov
echo "Number of bootstrap iterations:"
echo $nbboot
echo "Launching cross-exposure mode:"
echo $cross_exposure

if [[ ${region} == "lya" ]]
then
lrestmin=1050.0
lrestmax=1180.0
elif [[ ${region} == "SB1" ]]
then
lrestmin=1270.0
lrestmax=1380.0
elif [[ ${region} == "SB2" ]]
then
lrestmin=1410.0
lrestmax=1520.0
fi

if [[ ${noise_estimate} == "pipeline" ]]
then
coadd_picca_flag="False"
else
coadd_picca_flag="True"
fi

number_mask=0

if [[ ${lines_name} == "None" ]]
then
lines_flag1=""
lines_flag2=""
lines_flag3=""
else
lines_flag1="type "${number_mask}" = LinesMask"
lines_flag2="[mask arguments "${number_mask}"]"
lines_flag3="filename = "${lines}
number_mask=$((number_mask+1))
fi

if [[ ${dla_name} == "None" ]]
then
dla_flag1=""
dla_flag2=""
dla_flag3=""
dla_flag4=""
else
dla_flag1="type "${number_mask}" = DlaMask"
dla_flag2="[mask arguments "${number_mask}"]"
dla_flag3="los_id name = TARGETID"
dla_flag4="filename = "${dla}
number_mask=$((number_mask+1))
fi


if [[ ${bal} == "None" ]]
then
bal_flag1=""
bal_flag2=""
bal_flag3=""
bal_flag4=""
bal_flag5=""
else
bal_flag1="type "${number_mask}" = BalMask"
bal_flag2="[mask arguments "${number_mask}"]"
bal_flag3="los_id name = TARGETID"
bal_flag4="filename = "${cat}
bal_flag5="bal index type = "${bal}
number_mask=$((number_mask+1))
fi

if [[ ${use_bookkeeping} == "True" ]]
then
folder_name=$(p1desi_bookkeeping.py --region ${region} \
                                    --lines-name ${lines_name} \
                                    --catalog-name ${catalog_name} \
                                    --dla-name ${dla_name} \
                                    --bal ${bal} \
                                    --suffix ${suffix} \
                                    --noise-estimate ${noise_estimate} 2>&1 > /dev/null)
else
folder_name=${suffix}
fi

if [[ ${cross_exposure} == "True" ]]
then
coadd_picca_flag="True"
single_exposure_flag1="keep single exposures = True"
single_exposure_flag2="delta extraction single exposure = indiv"
else
single_exposure_flag1=""
single_exposure_flag2=""
fi


path_out=${path_out}/p1d_${folder_name}
mkdir -p ${path_out}

if [[ ${run_delta} == "True" ]]
then

echo -e '[general]
overwrite = True
out dir = '"${path_out}"'
logging level console = INFO
logging level file = DEBUG
num processors = '"${nb_proc}"'

[data]
type = '"${mode}"'
analysis type = PK 1D
save format = BinTableHDU
input directory = '"${path_in}"'
catalogue = '"${cat}"'
lambda min = 3600.0
lambda max = 7600.0
lambda min rest frame = '"${lrestmin}"'
lambda max rest frame = '"${lrestmax}"'
delta lambda = 0.8
delta lambda rest frame = 2.6666666666666666666666
lambda abs IGM = LYA
wave solution = lin
minimal snr pk1d = 1
keep surveys = '"${surveys}"'
use non-coadded spectra = '"${coadd_picca_flag}"'
'"${single_exposure_flag1}"'
'"${single_exposure_flag2}"'

[expected flux]
type = Dr16ExpectedFlux
iter out prefix = delta_attributes
num iterations = 7
use constant weight = '"${use_constant_weight}"'
order = 1

[corrections]
num corrections = 0

[masks]
num masks = '"${number_mask}"'
'"${lines_flag1}"'
'"${dla_flag1}"'
'"${bal_flag1}"'


'"${lines_flag2}"'
'"${lines_flag3}"'

'"${dla_flag2}"'
'"${dla_flag3}"'
'"${dla_flag4}"'

'"${bal_flag2}"'
'"${bal_flag3}"'
'"${bal_flag4}"'
'"${bal_flag5}"'' > ${path_out}/delta_interface_${folder_name}

picca_delta_extraction.py ${path_out}/delta_interface_${folder_name}
fi


if [[ ${run_pk} == "True" ]]
then

mkdir -p ${path_out}/pk1d_SNRcut${snr_cut}

echo -e 'picca_Pk1D.py \
--in-dir '"${path_out}"'/Delta \
--in-format fits \
--out-dir '"${path_out}"'/pk1d_SNRcut'"${snr_cut}"' \
--out-format fits \
--lambda-obs-min 3750. \
--noise-estimate '"${noise_estimate}"' \
--num-processors '"${nb_proc}"' \
--nb-pixel-masked-max 120 \
--nb-part 3 \
--SNR-min '"${snr_cut}"' \
--num-noise-exp 2500 > '"${path_out}"'/Log/p1d_output_'"${folder_name}"'_SNRcut'"${snr_cut}"' 2> '"${path_out}"'/Log/p1d_error_'"${folder_name}"'_SNRcut'"${snr_cut}"'' > ${path_out}/p1d_command_${folder_name}_SNRcut${snr_cut}

bash ${path_out}/p1d_command_${folder_name}_SNRcut${snr_cut}


if [[ ${cross_exposure} == "True" ]]
then

mkdir -p ${path_out}/pk1d_SNRcut${snr_cut}_cross_exposure

echo -e 'picca_Pk1D_cross_exposure.py \
--in-dir '"${path_out}"'/pk1d_SNRcut'"${snr_cut}"' \
--out-dir '"${path_out}"'/pk1d_SNRcut'"${snr_cut}_cross_exposure"' \
--num-processors '"${nb_proc}"' > '"${path_out}"'/Log/cross_exposure_output_'"${folder_name}"'_SNRcut'"${snr_cut}"' 2> '"${path_out}"'/Log/cross_exposure_error_'"${folder_name}"'_SNRcut'"${snr_cut}"'' > ${path_out}/cross_exposure_command_${folder_name}_SNRcut${snr_cut}

bash ${path_out}/cross_exposure_command_${folder_name}_SNRcut${snr_cut}

fi
fi

if [[ ${velunits} == "True" ]]
then
velunits_flag="--velunits"
else
velunits_flag=""
fi

if [[ ${rebinfac} == "None" ]]
then
rebinfac_flag="--rebinfac 1"
else
rebinfac_flag="--rebinfac "${rebinfac}
fi

if [[ ${meansnrcut} == "None" ]]
then
meansnrcut_flag=""
else
meansnrcut_flag="--apply-mean-snr-cut  --snr-cut-scheme "${meansnrcut}  
fi

if [[ ${compute_cov} == "True" ]]
then
cov_flag="--covariance --bootstrap --nbootstrap "${nbboot}
else
cov_flag=""
fi

if [[ ${cross_exposure} == "True" ]]
then
pk_path_flag="_cross_exposure"
else
pk_path_flag=""
fi

echo -e 'picca_Pk1D_postprocess.py \
--in-dir '"${path_out}"'/pk1d_SNRcut'"${snr_cut}"''"${pk_path_flag}"' \
--weight-method '"${weights}"' \
--ncpu '"${nb_proc}"' \
'"${velunits_flag}"' '"${rebinfac_flag}"' '"${meansnrcut_flag}"' \
'"${cov_flag}"' \
--overwrite' > ${path_out}/mean_p1d_command_${folder_name}_SNRcut${snr_cut}_weights${weights}

bash ${path_out}/mean_p1d_command_${folder_name}_SNRcut${snr_cut}_weights${weights}